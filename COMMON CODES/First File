{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " To Find whether the given points are collinear or not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-4.0\n",
      "non collinear points\n"
     ]
    }
   ],
   "source": [
    "x1=float(input(\"enter the value of x1:\"))\n",
    "y1=float(input(\"enter the value of y1:\"))\n",
    "x2=float(input(\" enter the value of x2:\"))\n",
    "y2=float(input(\"enter the value of y2:\"))\n",
    "x3=float(input(\" enter the value of x3:\"))\n",
    "y3=float(input(\"enter the value of y3:\"))\n",
    "a=(1/2)*(x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))\n",
    "print(a)\n",
    "if a==0:\n",
    "    print(\"points are collinear\")\n",
    "else:\n",
    "    print(\"non collinear points\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculater"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "press 1 for addition\\press 2 for subtration\\press 3 for multiplication \\press 5 for devision\n",
      "35.0\n"
     ]
    }
   ],
   "source": [
    "num1= float(input(\"enter a number here:\"))\n",
    "num2= float(input(\"enter another number here:\"))\n",
    "print (\"press 1 for addition\\press 2 for subtration\\press 3 for multiplication \\press 5 for devision\")\n",
    "choice=int(input(\"enter your choice from 1-4:\"))\n",
    "if  choice== 1 :\n",
    "    print(num1+num2)\n",
    "elif choice== 2:\n",
    "    print(num1-num2)\n",
    "elif choice==3 :\n",
    "    print(num1*num2)\n",
    "else:\n",
    "    print(\"invalid input\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finding the greater nuber in given three numbers-01"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a is greatest\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'a,b,c= 8,7,6\\nif a>b and a>c :\\n    print (\"a is greatest\")\\nelif b>c:\\n    print(\"b is greatest\")\\nelse:\\n    print(\"c is greatest\")'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a,b,c=8,2,7\n",
    "if a>b:\n",
    "    if a>c:print(\"a is greatest\")\n",
    "    else:print(\"c is greatest\")\n",
    "if b>c:\n",
    "    if b>a:print (\"b is greatest\")  \n",
    "    else:print(\"a is greatest\") \n",
    "if c>a:\n",
    "    if c>b:print(\"c is greatest\")\n",
    "    else:print(\"b is greatest\")\n",
    "\n",
    "'''a,b,c= 8,7,6\n",
    "if a>b and a>c :\n",
    "    print (\"a is greatest\")\n",
    "elif b>c:\n",
    "    print(\"b is greatest\")\n",
    "else:\n",
    "    print(\"c is greatest\")'''"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finding the greater nuber in given three numbers-02"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The first integer is : 6\n",
      "The second integer is: 4\n",
      "The third integer is: 7\n",
      "\n",
      "The greatest integer is  7\n"
     ]
    }
   ],
   "source": [
    "num1 = int(input(\"Enter the first integer:\"))\n",
    "print(\"The first integer is :\",num1)\n",
    "\n",
    "num2 = int(input(\"Enter the second integer:\"))\n",
    "print(\"The second integer is:\", num2)\n",
    "\n",
    "num3 = int(input(\"Enter the third integer :\"))\n",
    "print(\"The third integer is:\", num3)\n",
    "\n",
    "print(\"\")\n",
    "if num1> num2:\n",
    "    if num1> num3:\n",
    "        print(\"The greaest integer is:\" ,num1)\n",
    "    else:\n",
    "        print(\"The greatest integer is \", num3)\n",
    "else:\n",
    "    if num2> num3:\n",
    "        print(\"The greatest  integer is \",num2)\n",
    "    else:\n",
    "        print(\"The greatest integer is\",num3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Checking the Devisibility of two number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "devisible\n"
     ]
    }
   ],
   "source": [
    "a=float(input(\"enter a number here\"))\n",
    "b=float(input(\"enter another number here\"))\n",
    "if b!=0 and a%b==0:\n",
    "    print(\"devisible\")\n",
    "elif b==0:\n",
    "    print(\" not exists\")\n",
    "elif a==0 and b==0:\n",
    "    print(\"not exists\")\n",
    "else:\n",
    "    print(\"not devisible\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Change the value of fahrenhiet to celcius"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hot\n"
     ]
    }
   ],
   "source": [
    "f=float(input(\"enter the value in fahrenheit:\"))\n",
    "c= (f-32)*5/9\n",
    "if c<10:\n",
    "    print(\"cold\")\n",
    "elif c>=10 and c<25:\n",
    "    print(\"pleasant\")\n",
    "elif c>=25 and c<35:\n",
    "    print(\"warm\")\n",
    "else:\n",
    "    print(\"hot\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finding the slope and y intercept"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the slope is 0.0\n",
      "the y intercept is 3.0\n"
     ]
    }
   ],
   "source": [
    "x1=float(input(\"enter the value of x1\"))\n",
    "y1=float(input(\"enter the value of y1\"))\n",
    "x2=float(input(\"enter the value of x2\"))\n",
    "y2= float(input(\"enter the value of y2 \"))\n",
    "m= (y2-y1)/(x2-x1)\n",
    "print(\"the slope is\",m)\n",
    "c=float(input(\"enter the value of c:\"))\n",
    "x=float(input(\"enter the value of x:\"))\n",
    "y=m*x+c\n",
    "print(\"the y intercept is\",y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finding the nature and value of roots of any quadretic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "roots are complex:\n"
     ]
    }
   ],
   "source": [
    "a=float(input(\"enter the value of a:\"))\n",
    "b=float(input(\"enter the value of b:\"))\n",
    "c=float(input(\"enter the value of c:\"))\n",
    "d=b*b-4*a*c\n",
    "if d>0:\n",
    "    print(\"roots  are real\")\n",
    "    x=(-b+d**0.5)/(2*a)\n",
    "    print(x)   \n",
    "    y=(-b-d**0.5)/(2*a)\n",
    "    print(y)\n",
    "elif d==0:\n",
    "    print(\"roots are real and equal:\",(-b+d**0.5)/(2*a))\n",
    "else:\n",
    "    print(\"roots are complex:\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Find the odd or even number"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "it is a even number\n"
     ]
    }
   ],
   "source": [
    "a=int(input(\"enter a number here\"))\n",
    "if a%2==0 :\n",
    "    print(\"it is a even number\")\n",
    "else:\n",
    "    print(\"it is an odd number \")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "collinearty of points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10.5\n",
      "non collinear points\n"
     ]
    }
   ],
   "source": [
    "x1=float(input(\"enter the value of x1:\"))\n",
    "y1=float(input(\"enter the value of y1:\"))\n",
    "x2=float(input(\" enter the value of x2:\"))\n",
    "y2=float(input(\"enter the value of y2:\"))\n",
    "x3=float(input(\" enter the value of x3:\"))\n",
    "y3=float(input(\"enter the value of y3:\"))\n",
    "a=(1/2)*(x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))\n",
    "print(a)\n",
    "if a==0:\n",
    "    print(\"points are collinear\")\n",
    "else:\n",
    "    print(\"non collinear points\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finding the weight  from height (Robbins's Farmula)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "97.6\n"
     ]
    }
   ],
   "source": [
    "a=float(input(\"enter the gender:\"))\n",
    "b=float(input(\"enter the height above the 60 inches\"))\n",
    "if a==1:\n",
    "    w=52+(1.9*b)\n",
    "    print(w)\n",
    "else:\n",
    "    w=49+(1.6*b)\n",
    "    print(w)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
